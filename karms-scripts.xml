<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>UI</name>
			<packageName></packageName>
			<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>GMCP</name>
				<packageName></packageName>
				<script></script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>CharVitals</name>
					<packageName></packageName>
					<script>function round(n)
	return n % 1 &gt;= 0.5 and math.ceil(n) or math.floor(n)
end

function CharVitals()
	local current_hp, max_hp = tonumber(gmcp.Char.Vitals.hp), tonumber(gmcp.Char.Vitals.maxhp)
	local current_sp, max_sp = tonumber(gmcp.Char.Vitals.sp), tonumber(gmcp.Char.Vitals.maxsp)
--	local current_fp, max_fp = tonumber(gmcp.Char.Vitals.fp), tonumber(gmcp.Char.Vitals.maxfp)
	local percent_hp = round(tonumber(current_hp / max_hp * 100))
	local percent_sp = round(tonumber(current_sp / max_sp * 100))
--	local percent_fp = round(tonumber(current_fp / max_fp * 100))

	percent_hp = percent_hp.."%"
	if string.cut(percent_hp, 1) == "-" then percent_hp = "0%" end
	if current_hp &gt; max_hp then current_hp = max_hp end
  
	glowstickUI.hpbar:setValue(current_hp, max_hp, ("&lt;center&gt;&lt;b&gt;" ..current_hp.. " / " ..max_hp.. "&lt;/b&gt;&lt;/center&gt;"))	
	glowstickUI.hplabel:echo (percent_hp)
	
	percent_sp = percent_sp.."%"
	if string.cut(percent_sp, 1) == "-" then percent_sp = "0%" end
	if current_sp &gt; max_sp then current_sp = max_sp end

	glowstickUI.spbar:setValue(current_sp, max_sp, ("&lt;center&gt;&lt;b&gt;" ..current_sp.. " / " ..max_sp.. "&lt;/b&gt;&lt;/center&gt;"))	
	glowstickUI.splabel:echo (percent_sp)

--	percent_fp = percent_fp.."%"
--	if string.cut(percent_fp, 1) == "-" then percent_fp = "0%" end
--	if current_fp &gt; max_fp then current_fp = max_fp end

--	GUI.FatiguePoints:setValue(current_fp, max_fp, ("&lt;span style = 'color: black'&gt;&lt;center&gt;&lt;b&gt;" ..current_fp.. " / " ..max_fp.. " Fatigue Points (" ..percent_fp.. ")&lt;/b&gt;&lt;/center&gt;&lt;/span&gt;"))	
end</script>
					<eventHandlerList>
						<string>gmcp.Char.Vitals</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CharStatus</name>
					<packageName></packageName>
					<script>function CharStatus()

    local char_status = {"xp", "gold", "bank", "align"}
	for i=1,4
		do
	    glowstickUI[char_status[i].. "value"]:echo("&lt;center&gt;&lt;b&gt;"..gmcp.Char.Status[char_status[i]].."&lt;/b&gt;&lt;/center&gt;")
		end
end</script>
					<eventHandlerList>
						<string>gmcp.Char.Status</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CommChannelText</name>
					<packageName></packageName>
					<script>local colors = {
    gossip  = { "white",          "blue",        true },
    notify  = { "cyan",           "blue",        false },
    shout   = { "firebrick",      "white",       false },
    auction = { "gold",           "black",       false },
    system  = { "yellow",         "black",       false },
    say     = { "white",          "black",       false },
    newbie  = { "green",          "black",       false },
    arena   = { "SeaGreen",       "black",       false },
    tell    = { "blue",           "white",       true },
    party   = { "purple",         "black",       false },
    dragon  = { "white",          "firebrick",   true },
    necro   = { "yellow",         "firebrick",   true  },
    thief   = { "purple",         "black",       false },
    pk      = { "magenta",        "black",       true  },
    clan    = { "red",            "black",       false },
}

function CommChannelText()
    local chatPanel = "glowstickUI.ChatConsole"
    local channel = gmcp.Comm.Channel.Text.channel
    local talker = gmcp.Comm.Channel.Text.talker
    local text = gmcp.Comm.Channel.Text.text
        
    if colors[channel] then
        fg(chatPanel, colors[channel][1])
        bg(chatPanel, colors[channel][2])
        setBold(chatPanel, colors[channel][3])
    elseif string.match(channel, "-clan") then
        fg(chatPanel, colors["clan"][1])
        bg(chatPanel, colors["clan"][2])
        setBold(chatPanel, colors["clan"][3])
    else
        fg(chatPanel, "cyan")
        bg(chatPanel, "black")
        setBold(chatPanel, true)
    end
    if talker == "" then
		    if channel ~= "shout" then
            echo(chatPanel, text)
			  end
		else
		    echo(chatPanel, text)
		end
    
		resetFormat()
		
		if channel == "tell" or channel == "say" then
			glowstickUI.ChatConsole:flash()
		end
end</script>
					<eventHandlerList>
						<string>gmcp.Comm.Channel.Text</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>EnemyStatus</name>
					<packageName></packageName>
					<script>function EnemyStatus()
	local enemy = gmcp.Char.Enemy.enemy_name
	local current_enemy_health = gmcp.Char.Enemy.enemy_hp_string
	local percent_enemy_health = gmcp.Char.Enemy.enemy_curhp
	local percent_health

	if enemy == "None" then
		glowstickUI.targetbar:setValue(0, 100, ("&lt;center&gt;&lt;b&gt;Enemy Health&lt;/b&gt;&lt;/center&gt;"))
	else
		enemy = firstToUpper(enemy)
		percent_health = percent_enemy_health.."%"	
		glowstickUI.targetbar:setValue(percent_enemy_health, 100, ("&lt;center&gt;&lt;b&gt;"..enemy.." "..current_enemy_health.. " (" ..percent_health.. ")&lt;/b&gt;&lt;/center&gt;"))
	end
end</script>
					<eventHandlerList>
						<string>gmcp.Char.Enemy</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CharName</name>
					<packageName></packageName>
					<script>function CharName()
	local name = gmcp.Char.Name.name

	if name == "Asutras" then
		glowstickUI.bottom:move(glowstickUI.bottom.x, -70)
		glowstickUI.bottom:resize(glowstickUI.bottom.width, 70)
	else
		glowstickUI.bottom:move(glowstickUI.bottom.x, -35)
		glowstickUI.bottom:resize(glowstickUI.bottom.width, 35)
	end
end</script>
					<eventHandlerList>
						<string>gmcp.Char.Name</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>GUI</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>UI</name>
					<packageName></packageName>
					<script>-------------------------------------------------
--                  GUI                        --
-------------------------------------------------


setBorderColor (0, 0, 0)

glowstickUI = glowstickUI or {}

function firstToUpper(str)
    return (str:gsub("^%l", string.upper))
end

glowstickUI.lefttext = 0
glowstickUI.righttext = "-15"
glowstickUI.toptext = 450
glowstickUI.bottomtext = 70

glowstickUI.fontsize = 8


setBorderTop (glowstickUI.toptext)
setBorderLeft (glowstickUI.lefttext)
setBorderBottom (glowstickUI.bottomtext)
setBorderRight (glowstickUI.righttext)


glowstickUI.top = Geyser.Container:new ({
  name = "top",
  x = 0, y = 0,
  width = "100%", height = glowstickUI.toptext,
  })

glowstickUI.bottom = Geyser.Container:new ({
  name = "bottom",
  x = 0, y = "-" .. glowstickUI.bottomtext,
  width = "100%", height = glowstickUI.bottomtext
})

glowstickUI.topbar = Geyser.VBox:new({
  name = "topbar",
  x = 0,
  y = 0,
  width = "-0",
  height = "-0",
  }, glowstickUI.top)

glowstickUI.bottombar = Geyser.VBox:new({
  name = "bottombar",
  x = 0,
  y = 0,
  width = "-0",
  height = "-0",
}, glowstickUI.bottom)

-- =====
--  Top
-- =====

glowstickUI.topbox = Geyser.Container:new ({
  name = "topbox",
  v_policy = Geyser.Fixed,
  x = 0, y = 0,
  height = "-0",
  width = "-0",
}, glowstickUI.topbar)

-- ==========
--  Chat Box
-- ==========

glowstickUI.ChatConsole = Geyser.MiniConsole:new({
  name = "glowstickUI.ChatConsole",
  x = 5, y = 5,
  height = "-5",
  width = "-5",
}, glowstickUI.topbox)
setBackgroundColor("glowstickUI.ChatConsole", 0, 0, 0, 0)
setMiniConsoleFontSize("glowstickUI.ChatConsole", 8)
setFgColor("glowstickUI.ChatConsole", 192, 192, 192)
setBgColor("glowstickUI.ChatConsole", 0, 0, 0)
local width = glowstickUI.ChatConsole:getColumnCount()
setWindowWrap("glowstickUI.ChatConsole", (width - 2))

-- ===========
--  Character
-- ===========

glowstickUI.Spacer = Geyser.Label:new({
	name = "Spacer",
	x = 0, y = "-20",
	width = "100%",
	height = "18",
}, glowstickUI.topbox)

glowstickUI.Spacer:setColor(0,25,50)

glowstickUI.CharacterBox = Geyser.HBox:new({
  name = "CharacterBox",
	x = 0, y = "-20",
  width = "100%",
  height = "18"
}, glowstickUI.topbox)

local char_status = {"xp", "gold", "bank", "align"}

for i=1,4
  do
    glowstickUI[char_status[i].. "label"] = Geyser.Label:new({
      name = char_status[i].. "label",
      fgColor = "gold",
      message = "&lt;center&gt;".. string.upper(char_status[i]).. ":&lt;/center&gt;"
    }, glowstickUI["CharacterBox"])
		
		glowstickUI[char_status[i].. "label"]:setColor(0,25,50)

    glowstickUI[char_status[i].. "value"] = Geyser.Label:new({
      name = char_status[i].. "value",
      fgColor = "white",
			h_stretch_factor=1.5,
      message = [[&lt;center&gt;0&lt;/center&gt;]]
    }, glowstickUI["CharacterBox"])
		
		glowstickUI[char_status[i].. "value"]:setColor(0,25,50)
  end




-- ========
--  Bottom
-- ========

-- =============
--  Status Bars
-- =============

glowstickUI.statusbox = Geyser.Container:new ({
  name = "statusbox",
	x = 0, y = 0,
  height = "-0",
	width = "-0",
  }, glowstickUI.bottombar)

-- ==================
--  Gauges Container
-- ==================

glowstickUI.gauges = Geyser.Container:new ({
  name = "gauges",
  x = 0, y = 0,
  width = "-0", height = 35,
  }, glowstickUI.statusbox)

glowstickUI.gaugeback = Geyser.Label:new({
  name = "gaugeback",
  x = 0, y = 0,
  width = "100%", height = "100%",
}, glowstickUI.statusbox)
glowstickUI.gaugeback:setColor(0,0,0,255)

-- hpbar
glowstickUI.hpbar = Geyser.Gauge:new ({name="hpbar",x="1%",y=3,width="32%",height=15},glowstickUI.gauges)
glowstickUI.hpbar.front:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FF0000, stop: 0.2 #FF0000, stop: 0.8 #660000, stop: 1 #990000);]])
glowstickUI.hpbar.back:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #777777, stop: 1 #CC7777);]])

-- spbar
glowstickUI.spbar = Geyser.Gauge:new ({name="spbar",x="34%",y=3,width="32%",height=15},glowstickUI.gauges)
glowstickUI.spbar.front:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #4C4CFF, stop: 0.2 #4C4CFF, stop: 0.8 #1E1E66, stop: 1 #2D2D99);]])
glowstickUI.spbar.back:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #777777, stop: 1 #7777CC);]])

-- targetbar
glowstickUI.targetbar = Geyser.Gauge:new ({name="targetbar",x="67%",y=3,width="32%",height=15},glowstickUI.gauges)
glowstickUI.targetbar.front:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #FF00FF, stop: 0.2 #FF00FF, stop: 0.9 #660066, stop: 1 #990099);]])
glowstickUI.targetbar.back:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #777777, stop: 1 #CC77CC);]])

-- bar %s
glowstickUI.hplabel = Geyser.Label:new({
  name = "hplabel",
  x = "1%", y = 21,
  width = "30%", height = 15,
  fgColor = "white",
  message = [[HIT POINTS: 50/100 (50%)]]
}, glowstickUI.gauges)
glowstickUI.hplabel:setColor(0,0,0,0)

glowstickUI.splabel = Geyser.Label:new({
  name = "splabel",
  x = "34%", y = 21,
  width = "30%", height = 15,
  fgColor = "white",
  message = [[SPELL POINTS: 50/100 (50%)]]
}, glowstickUI.gauges)
glowstickUI.splabel:setColor(0,0,0,0)

-- to set bars - this initalizes, them,
-- call it later with the first number the % of the stat

glowstickUI.hpbar:setValue (50, 100)
glowstickUI.spbar:setValue (50, 100)
glowstickUI.targetbar:setValue (50, 100)

-- to update the text, send the same number you do for the bars, in the below format

-- [[
glowstickUI.hplabel:echo (string.format("%.0f", 50) .. "%")
glowstickUI.splabel:echo (string.format("%.0f", 50) .. "%")
--]]

glowstickUI.buffs = Geyser.Container:new ({
	name = "buffs",
	x = 0, y = 35,
	width = "-0", height = 35,
}, glowstickUI.statusbox)

glowstickUI.buff1 = Geyser.Gauge:new ({"buff1", x="1%",y=3,width="32%",height=15},glowstickUI.buffs)
glowstickUI.buff1.front:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #005700, stop: 0.2 #005700, stop: 0.9 #008A00, stop: 1 #52b152);]])
glowstickUI.buff1.back:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #777777, stop: 1 #CC77CC);]])
glowstickUI.buff1:setValue (0, 100)
		
glowstickUI.buff2 = Geyser.Gauge:new ({"buff2", x="34%",y=3,width="32%",height=15},glowstickUI.buffs)
glowstickUI.buff2.front:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #005700, stop: 0.2 #005700, stop: 0.9 #008A00, stop: 1 #52b152);]])
glowstickUI.buff2.back:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #777777, stop: 1 #CC77CC);]])
glowstickUI.buff2:setValue (0, 100)
		
glowstickUI.buff3 = Geyser.Gauge:new ({"buff3", x="67%",y=3,width="32%",height=15},glowstickUI.buffs)
glowstickUI.buff3.front:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #005700, stop: 0.2 #005700, stop: 0.9 #008A00, stop: 1 #52b152);]])
glowstickUI.buff3.back:setStyleSheet ([[background-color: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0 #777777, stop: 1 #CC77CC);]])
glowstickUI.buff3:setValue (0, 100)

glowstickUI.buff1label = Geyser.Label:new({
  name = "buff1label",
  x = "1%", y = 21,
  width = "32%", height = 15,
  fgColor = "white"
}, glowstickUI.buffs)
glowstickUI.buff1label:setColor(0,0,0,0)
glowstickUI.buff1label:echo("&lt;center&gt;&lt;b&gt;SCALES&lt;/b&gt;&lt;/center&gt;")

glowstickUI.buff2label = Geyser.Label:new({
  name = "buff2label",
  x = "34%", y = 21,
  width = "32%", height = 15,
  fgColor = "white"
}, glowstickUI.buffs)
glowstickUI.buff2label:setColor(0,0,0,0)
glowstickUI.buff2label:echo("&lt;center&gt;&lt;b&gt;CLAWS&lt;/b&gt;&lt;/center&gt;")

glowstickUI.buff3label = Geyser.Label:new({
  name = "buff3label",
  x = "67%", y = 21,
  width = "32%", height = 15,
  fgColor = "white"
}, glowstickUI.buffs)
glowstickUI.buff3label:setColor(0,0,0,0)
glowstickUI.buff3label:echo("&lt;center&gt;&lt;b&gt;SPIKES&lt;/b&gt;&lt;/center&gt;")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>CSSMan</name>
					<packageName></packageName>
					<script>-- CSSMan by Vadi. Public domain.

CSSMan = {}
CSSMan.__index = CSSMan

function CSSMan.new(stylesheet)
  local obj  = { stylesheet = {} }
  setmetatable(obj,CSSMan)
  local trim = string.trim

  assert(type(stylesheet) == "string", "CSSMan.new: no stylesheet provided. A possible error is that you might have used CSSMan.new, not CSSMan:new")

  for line in stylesheet:gmatch("[^\r\n]+") do
    local attribute, value = line:match("^(.-):(.-);$")
    if attribute and value then
      attribute, value = trim(attribute), trim(value)
      obj.stylesheet[attribute] = value
    end
  end

  return obj
end

function CSSMan:set(key, value)
  self.stylesheet[key] = value
end

function CSSMan:get(key)
  return self.stylesheet[key]
end

function CSSMan:getCSS(key)
  local lines, concat = {}, table.concat
  for k,v in pairs(self.stylesheet) do lines[#lines+1] = concat({k,": ", v, ";"}) end
  return concat(lines, "\n")
end

function CSSMan:gettable()
  return self.stylesheet
end

function CSSMan:settable(tbl)
  assert(type(tbl) == "table", "CSSMan:settable: table expected, got "..type(tbl))

  self.stylesheet = tbl
end</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
</MudletPackage>
